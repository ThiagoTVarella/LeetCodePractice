class Node:
    def __init__(self, key: int, value: int):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None

class LRUCache:

    def __init__(self, capacity: int):
        # Capacity
        self.capacity = capacity

        # Hash table to read values quickly
        self.cache_hash = {}

        # Linked list to evict LRU elements
        self.MR = Node(0,0)
        self.LR = Node(0,0)
        self.MR.prev = self.LR
        self.LR.next = self.MR

    def remove(self, node):
        self.cache_hash.pop(node)
        node.prev.next = node.next
        node.next.prev = node.prev 

    def insert(self, node):
        self.cache_hash[node] = node
        node.prev = self.MR.prev
        node.next = self.MR

    def get(self, key: int) -> int:
        if self.cache_hash[key]:
            self.remove(self.cache_hash[key])
            self.insert(self.cache_hash[key])
            return self.cache_hash[key].value
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        new_key = Node(key,value)
        if key in self.cache_hash:
            self.remove(self.cache_hash[key])
        self.cache_hash[key] = new_key
        self.insert(new_key)

        print(self.cache_hash)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)